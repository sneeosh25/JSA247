{
  "name": "flickrapi",
  "version": "0.3.22",
  "author": {
    "name": "Pomax",
    "email": "pomax@nihongoresources.com"
  },
  "description": "A Node.js, and client-side, implementation of the Flickr API (for use with an API key, server-side oauth enabled)",
  "dependencies": {
    "async": "~0.2.10",
    "glob": "~3.2.6",
    "open": "0.0.x",
    "progress": "1.1.4",
    "prompt": "0.2.x",
    "request": "2.26.x"
  },
  "devDependencies": {
    "express": "~3.4.7",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-uglify": "~0.2.2",
    "habitat": "~1.1.0"
  },
  "main": "./src/FlickrAPI",
  "license": "MIT",
  "engines": {
    "node": ">=0.8"
  },
  "keywords": [
    "flickrapi",
    "flickr",
    "api",
    "oauth"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/Pomax/node-flickrapi.git"
  },
  "scripts": {
    "test": "node test"
  },
  "readme": "# A Node.js, and client-side, implementation of the Flickr API\n\nWith oauth authentication for Flickr API keys if you're using\nit server-side (authenticated calls from the browser are too\ninsecure to support for the moment, and will throw an error).\n\nYou also get API route proxying so you can call the Flickr\nmethods through your own server and get Flickr responses back\nfor free. Super handy.\n\n## How to use the client-side library\n\nScript-load the `browser/flickrapi.dev.js` library during\ndevelopment work, and use the `browser/flickrapi.js` library\nin production.\n\nYou can access Flickr by creating an API instance as:\n\n```\nvar flickr = new Flickr({\n  api_key: \"1234ABCD1234ABCD1234ABCD1234ABCD\"\n});\n```\n\nand then simply querying Flickr using the API as described\nover at http://www.flickr.com/services/api - for instance,\nto search for all photographs that text-match the terms\n\"red panda\", you would call:\n\n```\nflickr.photos.search({\n  text: \"red+panda\"\n}, function(err, result) {\n  if(err) { throw new Error(err); }\n  // do something with result\n}\n```\nAll calls are asynchronous, and the callback handling function\nalways has two arguments. The first, if an error occurs, is\nthe error generated by Flickr; the second, if the call succeeds,\nis the result sent back from Flickr, as plain JavaScript object.\n\n### Accessing an API proxy instead\n\nNote that using a client-side library that requires your private\ncredentials to be revealed is insanely insecure, bordering on\nplain stupid, so what you really want to do is have a middleman\nthat the browser can call, and will take care of asking Flickr\nfor the data inside an authenticated request and then sending\nthe data back to the browser without even needing to expose\nany private credentials.\n\nYou want to use a proxy.\n\nGood news: the flickrapi module will let you set one up for\nfree (see further down for instructions on how to do this),\nso to make use of the proxied API, you can supply the Flickr\nconstruction with an `endpoint` property instead:\n\n```\nvar flickr = new Flickr({\n  endpoint: \"http//localhost:3000/services/rest/\"\n});\n```\n\nUsing a custom endpoint means that the library expects the\nendpoint to take care of all authentication, so if you\nuse a custom endpoint there is no need to also supply your\napi key value. Even if you do, it'll get ignored.\n\n## how to use this package with Node.js\n\n### Access to the full API using `authenticate`\n\nThe initial require in your code is simply `require(\"flickrapi\")`\nafter making sure you added flickrapi to your package.json, either\nmanually or by running `npm install flickrapi --save` for the project\nyou're using it in.\n\nOnce available, you can authenticate with flickr, which will\nresult in a callback that gives you the actual API object:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = {\n      api_key: \"API key that you get from Flickr\",\n      secret: \"API key secret that you get from Flickr\"\n    };\nFlickr.authenticate(flickrOptions, function(error, flickr) {\n  // we can now use \"flickr\" as our API object\n});\n```\n\ncalling API functions is then a matter of calling the functions\nas they are listed on http://www.flickr.com/services/api, so\nif you wish to get all your own photos, you would call:\n\n```\nflickr.photos.search({\n  user_id: flickr.options.user_id,\n  page: 1,\n  per_page: 500\n}, function(err, result) {\n  // result is Flickr's response\n});\n```\n\nAll results are in JSON format. For obvious reasons.\n\n### Access to the public API using `tokenOnly`\n\nThere is also a function for creating Flickr API instances that\ncan only call public API functions (or will only get public results\nfor functions that may potentially access private results, too).\n\nThis does not require any oauth negotiation during setup:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = {\n      api_key: \"API key that you get from Flickr\",\n      secret: \"API key secret that you get from Flickr\"\n    };\nFlickr.tokenOnly(flickrOptions, function(error, flickr) {\n  // we can now use \"flickr\" as our API object,\n  // but we can only call public methods and access public data\n});\n```\n\nResults will also be in JSON format (naturally).\n\n### flickr.options\n\nIn addition to the standard Flickr functions, the `flickr` object\nalso has an `options` property, which looks like this:\n\n```\n{\n  api_key: \"your API key\",\n  secret: \"your API key secret\",\n  user_id: \"your user id, based on your first-time authorisation\",\n  access_token: \"the preauthorised Flickr access token\",\n  access_token_secret: \"its corresponding secret\",\n  oauth_timestamp: \"the timestamp for the last flickr API call\",\n  oauth_nonce: \"the cryptographic nonce that request used\",\n  force_auth: true or false (defaults to false) to indicate whether to force\n              oauth signing for functions that can be called both key-only\n              and authenticated for additional data access (like the photo\n              search function)\n  retry_queries: if this is defined, Flickr queries will be retried if they fail\n  afterDownsync: <optional, you can bind an arg-less callback function here>\n  permissions: <optional, default value is 'read', see \"on first run\" below>\n}\n```\n\n### Downloading all your Flickr stuffs\n\nYou can use this module to very easily download all your Flickr stuffs:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync());\n```\n\nThat's all you need to run. This will generate a data directory with\nyour images in `./data/images` (in several sizes), and the information\narchitecture (metadata, sets, collections, etc) in `./data/ia`.\n\nIf you want this in a different directory, you can pass the dir as an\nargument to the downsync function:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync(\"userdata/me\"));\n```\n\nThis will now create a `./data` for the flickr API information, but\\\nalso a `./userdata/me/` directory that contains the `images` and `ia`\ndirs with your personal data.\n\nFlickrMirror, available at https://github.com/Pomax/flickrmirror, bolts\na UI on top of the FlickrAPI module to give you an instant frontend\nfor your photographs and Flickr information about them.\n\n#### One-step downsyncing\n\nIf you just want to immediately downsync all your data, simply use\nthe `test.js` application with the --downsync runtime argument.\nSimply add your Flickr API key information to the `.env` file and\nthen run\n\n`> node test --downsync`\n\nDone. Authenticate, and then just wait for it to finish. You now\nhave a mirror of all your Flickr data.\n\n#### Syncing with Flickr in your code\n\nSyncing is a mostly a matter or running the downsync function again.\nThis will update anything that was updated or added on Flickr, but\nwill not delete anything from your local mirror that was deleted\nfrom Flickr unless specifically told to do so, by passing a second\nargument (internally known as the \"removeDeleted\" flag in the code)\nto the `downsync` function call:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync(\"userdata/me\", true));\n```\n\nIf `true`, this will delete local files that were removed on Flickr\n(e.g. photos that you didn't like anymore, etc). If `false`, or\nomitted, no pruning of the local mirror will be performed.\n\n#### Using all your Flickr stuffs in an app\n\nIf you downloaded all your Flickr stuffs, you can use these in your\nown node apps by \"dry loading\" Flickr:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrData = Flickr.loadLocally();\n```\n\nThis will give you an object with the following structure:\n\n```\n{\n  photos: [photo objects],\n  photo_keys: [photo.id array, sorted on publish date],\n  photosets: [set objects],\n  photoset_keys: [set.id array, sorted on creation date],\n  collections: [collection objects],\n  collection_keys: [collection.id array, sorted on title],\n}\n```\n\nNot sure what these objects look like? head over to your `./data/ia`\ndirectory and just open a .json file in your favourite text editor.\n\n## On first run\n\n### Fetching the API\n\nOn first run, the package will fetch all known methods from\nFlickr, and cache them for future use. This can take a bit,\nas there are a fair number of methods, but is inconsequential\non subsequent package loading.\n\n### Authenticating with Flickr\n\nOn first run, the authentication function will notice that\nthere are no `access_token` and `access_token_secret` values\nset, and will negotiate these with Flickr using their oauth\nAPI, based on the permissions you request for your API key.\n\nBy default, the only permissions are \"read\" permissions, but\nyou can override this by adding a `permissions` property to\nthe options object:\n\n* `permissions: \"read\"` will give the app read-only access (default)\n* `permissions: \"write\"` will give it read + write access\n* `permissions: \"delete\"` will give it read, write and delete access\n\nRunning the app will show output such as the following block:\n\n```\n$> node app\n{ oauth_callback_confirmed: 'true',\n  oauth_token: '...',\n  oauth_token_secret: '...' }\nprompt: oauth_verifier: []\n```\n\nOnce the app reaches this point it will open a browser, allowing you\nto consent to the app accessing your most private of private parts.\nOn Flickr, at least. If you agree to authorize it, you will get an\nauthorisation code that you need to pass so that the flickrapi can\nnegotiate access tokens with Flickr. Doing so continues the program:\n\n```\n$> node app\n{ oauth_callback_confirmed: 'true',\n  oauth_token: '...',\n  oauth_token_secret: '...' }\nprompt: oauth_verifier: 123-456-789\n\nAdd the following variables to your environment:\n\nexport FLICKR_USER_ID=\"12345678%40N12\"\nexport FLICKR_ACCESS_TOKEN=\"72157634942121673-3e02b190b9720d7d\"\nexport FLICKR_ACCESS_TOKEN_SECRET=\"99c038c9fc77673e\"\n```\n\nAdd these variables to your environment, or put them in an `.env`\nfile for use with `process.env` or the `habitat` package or the like,\nor put them straight into your source code to use the flickrapi:\n\n```\nvar FlickrOptions = {\n      api_key: \"your API key\",\n      secret: \"your API key secret\",\n      user_ud: \"...\",\n      access_token: \"...\",\n      access_token_secret: \"...\"\n    }\n```\n\nThe flickrapi package will now be able to authenticate with Flickr\nwithout constantly needing to ask you for permission to access data.\n\n### Using your own oauth callback endpoint\n\nBy default the oauth callback is set to \"out-of-band\". You can see\nthis in the `.env` file as the `FLICK_CALLBACK=\"oob\"` parameter, but\nif this is omitted the code falls back to oob automatically. For\nautomated processes, or if you don't want your uers to have to type\nanything in a console, you can override this by setting your own oauth\ncallback endpoint URL.\n\nUsing a custom callback endpoint, the oauth procedure will contact\nthe indicated endpoint with the authentication information, rather\nthan requiring your users to manually copy/paste the authentication\nvalues.\n\n**Note** your users will still need to authenticate the app from a browser.\n\nTo use a custom endpoint, add the URL to the options as the `callback`\nproperty:\n\n```\nvar options = ...;\noptions.callback: \"http://.../...\";\nFlickr.authenticate(options, function(error, flickr) {\n  ...\n}\n```\n\nAdding an `export FLICKR_CALLBACK=\"http://...\"` to your environment\nwill automatically take care of this. The callback URL handler will\nat its minimum need to implement the following middleware function:\n\n```\nfunction(req, res) {\n  res.write(\"\");\n  options.exchange(req.query);\n}\n```\n\nHowever, having the response tell the user that authorisation was\nreceived and that they can safely close this window/tab is generally\na good idea.\n\nIf you wish to call the exchange function manually, the object\nexpected by `options.exchange` looks like this:\n\n```\n{\n  oauth_token: \"...\",\n  oauth_verifier: \"...\"\n}\n```\n\n### Custom authentication: browserless, noAPI, and silent\n\nThere are a number of special options that can also be set to effect\ndifferent authentication procedures. Calling the authenticate function\nwith an options object means the following options can also be passed:\n\n```\noptions = {\n  ...\n  nobrowser: true, // console.logs the auth URL instead of opening a browser for it.\n  noAPI: true,     // only performs authentication, without building the Flickr API.\n  silent: true ,   // doesn't do an information console print after successful auth.\n  ...\n}\n```\n\nIf using `noAPI`, the authentication credentials can be extracted\nfrom the options object inside the callback function that you pass\nalong. The `options.access_token` and `options.access_token_secret`\nwill contain the result of the authentication procedure.\n\n## Flickr API proxying for connect/express apps\n\nIf your app is a connect or express app, you get Flickr API proxying\nfor free. Simply set it up and then call your own API route in the\nsame way you would call the Flickr API, minus the security credentials,\nsince the servers side Flickr api object already has those baked in.\n\nAs an example, the test.js script for node-flickrapi uses the\nfollowing code to set up the local API route:\n\n```\nvar express = require(\"express\");\nFlickr.authenticate(FlickrOptions, function(error, flickr) {\n  var app = express();\n  app.configure(function() {\n    [...]\n    flickr.proxy(app, \"/service/rest\");\n  });\n  [...]\n});\n```\n\nAll calls use the `POST` verb. To test the local API route,\na simple cURL will do:\n\n```\ncurl -X POST -H \"Content-Type: application/json\"\n             -d '{\"method\":\"flickr.photos.search\", \"text\":\"red+pandas\"}'\n             http://127.0.0.1:3000/service/rest/\n```\n\nNote that there is no user authentication baked in, so if you want\nto make sure only \"logged in users\" get to use that local API route,\nyou'll need to pass an authentication middleware function as third\nargument to flickr.proxy:\n\n```\nfunction authenticator(req, res, next) {\n  // assuming your session management uses req.session:\n  if(req.session.authenticated) {\n    return next();\n  }\n  next({status:403, message: \"not authorised to call API methods\"});\n}\n\nflickr.proxy(app, \"/service/rest/\", authenticator);\n```\n\n## (Re)compiling the client-side library\n\nYou can run the `node compile` command to (re)generate a flickrapi.js\nclient-side library, saved to the `browser` directory. This generates\na sparse library that will let you call all public methods (but\ncurrently not any method that requires read-private, write, or delete\npermissions), but will not tell you what's wrong when errors occur.\n\nIf you need this information, `node compile dev` will generate a\nflickrapi.dev.js library that has all the information needed for\ndeveloping work; simply use this during development and use the\nflickrapi.js library in production.\n\nNote that no `min` version is generated; For development there is\nno sense in using one, and the savings on the production version\nare too small to matter (it's only 10kb smaller). If your server\ncan serve content gzipped, the minification will have no effect\non the gzipped size anyway (using gzip, the plain library is ~4.5kb,\nwith the dev version being ~30kb).\n\n## Software that uses FlickrAPI\n\nThe most obvious application that uses this package is FlickrMirror,\navailable at https://github.com/Pomax/flickrmirror, which mirrors\nyour Flickr data and acts as alternative frontend for your photographs\n(and sets and collections) using a default styling based on the old\nFlickr look, but as open source so you can change the look and feel\nhowever you like.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Pomax/node-flickrapi/issues"
  },
  "homepage": "https://github.com/Pomax/node-flickrapi",
  "_id": "flickrapi@0.3.22",
  "dist": {
    "shasum": "d2e2b24d41ae9c1f438486535f50e6c921d34b90"
  },
  "_from": "flickrapi@",
  "_resolved": "https://registry.npmjs.org/flickrapi/-/flickrapi-0.3.22.tgz"
}
